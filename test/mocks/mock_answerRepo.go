// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_answerRepo is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	entities "survey/internal/entities"

	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
	context "golang.org/x/net/context"
)

// MockAnswerRepo is a mock of AnswerRepo interface.
type MockAnswerRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAnswerRepoMockRecorder
}

// MockAnswerRepoMockRecorder is the mock recorder for MockAnswerRepo.
type MockAnswerRepoMockRecorder struct {
	mock *MockAnswerRepo
}

// NewMockAnswerRepo creates a new mock instance.
func NewMockAnswerRepo(ctrl *gomock.Controller) *MockAnswerRepo {
	mock := &MockAnswerRepo{ctrl: ctrl}
	mock.recorder = &MockAnswerRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnswerRepo) EXPECT() *MockAnswerRepoMockRecorder {
	return m.recorder
}

// CreateAnswer mocks base method.
func (m *MockAnswerRepo) CreateAnswer(ctx context.Context, log logrus.FieldLogger, answer *entities.Answer) (*entities.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswer", ctx, log, answer)
	ret0, _ := ret[0].(*entities.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnswer indicates an expected call of CreateAnswer.
func (mr *MockAnswerRepoMockRecorder) CreateAnswer(ctx, log, answer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswer", reflect.TypeOf((*MockAnswerRepo)(nil).CreateAnswer), ctx, log, answer)
}

// DeleteAnswer mocks base method.
func (m *MockAnswerRepo) DeleteAnswer(ctx context.Context, log logrus.FieldLogger, answerID, surveyID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnswer", ctx, log, answerID, surveyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnswer indicates an expected call of DeleteAnswer.
func (mr *MockAnswerRepoMockRecorder) DeleteAnswer(ctx, log, answerID, surveyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnswer", reflect.TypeOf((*MockAnswerRepo)(nil).DeleteAnswer), ctx, log, answerID, surveyID)
}

// Vote mocks base method.
func (m *MockAnswerRepo) Vote(ctx context.Context, log logrus.FieldLogger, answerID, surveyID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", ctx, log, answerID, surveyID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Vote indicates an expected call of Vote.
func (mr *MockAnswerRepoMockRecorder) Vote(ctx, log, answerID, surveyID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockAnswerRepo)(nil).Vote), ctx, log, answerID, surveyID)
}
